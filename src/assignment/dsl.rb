# frozen_string_literal: true

require_relative 'grammar'
require_relative '../adjustment'

module ContextFree
  # The DSL module provides a context in which the DSL code is evaluated
  module DSL
    # Provides a context for evaluating a single rule
    class RuleContext
      # primitive_shapes will contain the primitive shapes generated by evaluating the rule
      attr_reader :primitive_shapes
      # user_defined_shapes will contain the user defined shapes generated by evaluating the rule
      attr_reader :user_defined_shapes

      # Creates a rule evaluation context for the given grammar
      # and the properties of the parent shape.
      def initialize(grammar:, properties:)
        @grammar = grammar
        @properties = properties
        @primitive_shapes = []
        @user_defined_shapes = []

        # Define singleton methods for every user defined shape
        @grammar.shapes.each_key do |shape_name|
          define_singleton_method shape_name do |**kwargs|
            user_defined_shapes << Shape.new(shape_name, @properties.adjust(Adjustment.new(**kwargs)))
          end
        end
      end

      private

      # We just add normal methods for primitive shapes

      def triangle(**kwargs)
        add_primitive_shape(:triangle, **kwargs)
      end

      def square(**kwargs)
        add_primitive_shape(:square, **kwargs)
      end
      
      def add_primitive_shape(name, **kwargs)
        primitive_shapes << Shape.new(name, @properties.adjust(Adjustment.new(**kwargs)))
      end
    end

    @@grammar = Grammar.new
    @@current_shape = nil

    class << self
      # Returns the grammar associated with the DSL
      # @return [Grammar]
      def grammar
        @@grammar
      end

      # Resets the grammar associated with the DSL,
      # so that the DSL module can be reused.
      def reset
        @@grammar = Grammar.new
      end
    end

    # Define the startshape
    def startshape(shape_name, **kwargs)
      @@grammar.start_shape = Shape.new(shape_name, Properties.default.adjust(Adjustment.new(**kwargs)))
    end

    # Set the background color adjustment
    def background(**kwargs)
      @@grammar.bg_color_adjustment = Adjustment.new(**kwargs)
    end

    # Set the minimum size. If shapes are smaller than this size, they will be culled.
    def minsize(min_size)
      @@grammar.min_size = min_size
    end

    # Define a shape with optional block if it only has a single rule
    def shape(shape_name, &block)
      @@current_shape = @@grammar.shapes[shape_name] = []
      return unless block_given?

      rule(&block)
      @@current_shape = nil
    end

    # Define a rule for the current shape
    def rule(weight = 1, &block)
      @@current_shape << [weight, block]
    end
  end
end
